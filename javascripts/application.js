// Generated by CoffeeScript 1.4.0
(function() {
  var Bomb, CircularFrame, Core, Entity, Map, RectangularFrame, Soldier, Vector, Vertex,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Core = (function() {

    function Core(attributes) {
      var defaults;
      if (attributes == null) {
        attributes = {};
      }
      this.getFrame = __bind(this.getFrame, this);

      this.entities = [];
      this.entityCount = 0;
      this.frameCount = 0;
      defaults = {
        fps: 60,
        viewport: document
      };
      _.extend(defaults, attributes);
      this.attributes = defaults;
      this.el = this.attributes.viewport;
      this.$el = $(this.el);
      this;

    }

    Core.prototype.run = function() {
      return this.loopProcessId = setInterval(this.getFrame, 1000 / this.attributes.fps);
    };

    Core.prototype.stop = function() {
      clearInterval(this.loopProcessId);
      return this.loopProcessId = null;
    };

    Core.prototype.addEntity = function(entity, options) {
      var $view;
      if (options == null) {
        options = {};
      }
      $view = entity.render(options);
      if (entity.willRegister()) {
        ++this.entityCount;
        entity.worldId = "c" + this.entityCount;
        this.entities.push(entity);
        if ($view) {
          return this.$el.append($view);
        }
      }
    };

    Core.prototype.removeEntity = function(entity) {
      this.entities = _.without(this.entities, entity);
      return entity.close();
    };

    Core.prototype.frame = function() {
      var _ref;
      return (_ref = this.f) != null ? _ref : this.f = new RectangularFrame(0, 0, this.$el.width(), this.$el.height());
    };

    Core.prototype.isOutsideViewport = function(frame) {
      var vpFrame;
      vpFrame = this.frame();
      return vpFrame.isExcluding(frame);
    };

    Core.prototype.getFrame = function() {
      var entity, _i, _len, _ref, _results;
      ++this.frameCount;
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.collidable) {
          this.checkCollisions(entity);
        }
        _results.push(this.evaluateEntity(entity));
      }
      return _results;
    };

    Core.prototype.evaluateEntity = function(entity) {
      entity.evaluate();
      if (entity.isRemoveable() || this.isOutsideViewport(entity.frame())) {
        return this.removeEntity(entity);
      }
    };

    Core.prototype.checkCollisions = function(entity) {
      var e, vertex, _i, _len, _ref, _ref1, _results;
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (!(e !== entity && e.collidable)) {
          continue;
        }
        if (entity.worldId === 'c2') {
          vertex = (_ref1 = entity.frame()) != null ? _ref1.centerVertex() : void 0;
        }
        if (entity.frame().isOverlapping(e.frame())) {
          _results.push(true);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Core;

  })();

  Entity = (function() {

    Entity.prototype.content = '';

    Entity.prototype.className = 'entity';

    Entity.prototype.tagName = 'div';

    Entity.prototype.width = 48;

    Entity.prototype.height = 48;

    Entity.prototype.collidable = true;

    Entity.prototype.events = {};

    function Entity(attributes) {
      if (attributes == null) {
        attributes = {};
      }
      this.changed = {};
      this.interactions = [];
      this.attributes = attributes;
      this.initialize();
      this;

    }

    Entity.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      return this;
    };

    Entity.prototype.render = function(options) {
      var callback, defaults, event, styles, _ref;
      if (options == null) {
        options = {};
      }
      defaults = {
        x: 0,
        y: 0
      };
      _.extend(defaults, options);
      this.el = this.template();
      this.$el = $(this.el);
      styles = {
        position: 'absolute',
        top: defaults.y - (this.height / 2),
        left: defaults.x - (this.width / 2)
      };
      this.$el.css(styles);
      _ref = this.events;
      for (event in _ref) {
        callback = _ref[event];
        this.$el.on(event, {}, this[callback]);
      }
      return this.$el;
    };

    Entity.prototype.template = function() {
      return "<" + this.tagName + " class='" + this.className + "'>" + this.content + "</" + this.tagName + ">";
    };

    Entity.prototype.set = function(attributes) {
      var changedKeys;
      if (attributes == null) {
        attributes = {};
      }
      changedKeys = _.keys(attributes);
      this.changed = _.pick(this.attributes, changedKeys);
      return _.extend(this.attributes, attributes);
    };

    Entity.prototype.frame = function() {
      var position;
      position = this.$el.position();
      return new RectangularFrame(position.left, position.top, position.left + this.$el.width(), position.top + this.$el.height());
    };

    Entity.prototype.evaluate = function() {
      return this;
    };

    Entity.prototype.willRegister = function() {
      return this;
    };

    Entity.prototype.interactWith = function(entity) {
      var _ref;
      if (_ref = entity.worldId, __indexOf.call(this.interactions, _ref) < 0) {
        this.interactions.push(entity.worldId);
        if (entity.dealsDamage()) {
          return this.takeDamage(entity.damage);
        }
      }
    };

    Entity.prototype.takeDamage = function(damage) {
      return this;
    };

    Entity.prototype.dealsDamage = function() {
      return this.damage != null;
    };

    Entity.prototype.isRemoveable = function() {
      return false;
    };

    Entity.prototype.close = function() {
      return this.$el.remove();
    };

    return Entity;

  })();

  Map = (function() {

    function Map() {}

    return Map;

  })();

  Vertex = (function() {

    function Vertex(x, y) {
      var _ref;
      _ref = [x, y], this.x = _ref[0], this.y = _ref[1];
    }

    Vertex.prototype.vectorWith = function(vertex) {
      var vectorX, vectorY;
      vectorX = this.x - vertex.x;
      vectorY = this.y - vertex.y;
      return new Vector(vectorX, vectorY);
    };

    return Vertex;

  })();

  Vector = (function(_super) {

    __extends(Vector, _super);

    function Vector() {
      return Vector.__super__.constructor.apply(this, arguments);
    }

    Vector.prototype.length = function() {
      return Math.sqrt((this.x * this.x) + (this.y * this.y));
    };

    Vector.prototype.subtract = function(vector) {
      return new Vector(this.x - vector.x, this.y - vector.y);
    };

    Vector.prototype.divideBy = function(scalar) {
      return (this.x / scalar) + (this.y / scalar);
    };

    Vector.prototype.dotProductOf = function(scalar) {
      return (this.x * scalar) + (this.y * scalar);
    };

    return Vector;

  })(Vertex);

  RectangularFrame = (function() {

    function RectangularFrame(left, top, right, bottom) {
      var _ref;
      _ref = [left, top, right, bottom], this.left = _ref[0], this.top = _ref[1], this.right = _ref[2], this.bottom = _ref[3];
    }

    RectangularFrame.prototype.vertices = function() {
      return [new Vertex(this.left, this.top), new Vertex(this.right, this.top), new Vertex(this.right, this.bottom), new Vertex(this.left, this.bottom)];
    };

    RectangularFrame.prototype.isExcluding = function(excludable) {
      var vertices, _ref, _ref1;
      if (excludable instanceof Vertex) {
        return !((this.left <= (_ref = excludable.x) && _ref <= this.right) && (this.top <= (_ref1 = excludable.y) && _ref1 <= this.bottom));
      } else if (excludable instanceof RectangularFrame) {
        return excludable.right < this.left || excludable.left > this.right || excludable.top > this.bottom || excludable.bottom < this.top;
      } else if (excludable instanceof CircularFrame) {
        vertices = this.vertices();
        return this.isExcluding(excludable.centerVertex()) && excludable.isExcluding(vertices[0]) && excludable.isExcluding(vertices[1]) && excludable.isExcluding(vertices[2]) && excludable.isExcluding(vertices[3]);
      }
    };

    RectangularFrame.prototype.isOverlapping = function(frame) {
      return !this.isExcluding(frame);
    };

    return RectangularFrame;

  })();

  CircularFrame = (function() {

    function CircularFrame(x, y, radius) {
      var _ref;
      _ref = [x, y, radius], this.x = _ref[0], this.y = _ref[1], this.radius = _ref[2];
    }

    CircularFrame.prototype.centerVertex = function() {
      return new Vertex(this.x, this.y);
    };

    CircularFrame.prototype.isExcluding = function(excludable) {
      var distance, dx, dy;
      if (excludable instanceof Vertex) {
        return !this.isOverlapping(excludable);
      } else if (excludable instanceof CircularFrame) {
        dx = this.x - excludable.x;
        dy = this.y - excludable.y;
        distance = Math.sqrt((dy * dy) + (dx * dx));
        return distance > (this.radius + excludable.radius);
      } else if (excludable instanceof RectangularFrame) {
        return !this.isOverlapping(excludable);
      }
    };

    CircularFrame.prototype.isOverlapping = function(excludable) {
      var distance, squareDistance, topLeftV, topRightV, vertices;
      if (excludable instanceof Vertex) {
        squareDistance = Math.pow(this.x - excludable.x, 2) + Math.pow(this.y - excludable.y, 2);
        return squareDistance < this.radius;
      } else if (excludable instanceof CircularFrame) {
        return this.isExcluding(excludable);
      } else if (excludable instanceof RectangularFrame) {
        vertices = excludable.vertices();
        topLeftV = vertices[0];
        topRightV = vertices[1];
        distance = this.intersectionWith(topRightV, topLeftV);
        console.log(distance.length());
        return excludable.isExcluding(this.centerVertex()) || this.isExcluding(vertices[0]) && this.isExcluding(vertices[1]) && this.isExcluding(vertices[2]) && this.isExcluding(vertices[3]);
      }
    };

    CircularFrame.prototype.intersectionWith = function(v1, v2) {
      var cVector, closest, distanceV, proj, projV, segLength, segVUnit, segVector;
      segVector = v1.vectorWith(v2);
      cVector = v1.vectorWith(this.centerVertex());
      segLength = segVector.length();
      segVUnit = segVector.divideBy(segLength);
      proj = cVector.dotProductOf(segVUnit);
      if (proj <= 0) {
        closest = v1;
      } else if (proj > segLength) {
        closest = v2;
      } else {
        projV = segVUnit * proj;
        closest = [v1.x + projV, v2 + projV];
      }
      return distanceV = cVector.subtract(closest);
    };

    return CircularFrame;

  })();

  Bomb = (function(_super) {

    __extends(Bomb, _super);

    function Bomb() {
      return Bomb.__super__.constructor.apply(this, arguments);
    }

    Bomb.prototype.className = 'bomb';

    Bomb.prototype.content = "";

    Bomb.prototype.damage = 45;

    Bomb.prototype.events = {
      'click': 'didClick'
    };

    Bomb.prototype.initialize = function() {
      return this.createdAt = new Date();
    };

    Bomb.prototype.isRemoveable = function() {
      var opacity;
      opacity = this.$el.css('opacity');
      return parseFloat(opacity, 10) === 0;
    };

    Bomb.prototype.isExploding = function() {
      var date;
      date = new Date();
      return date - this.createdAt > 3000;
    };

    Bomb.prototype.frame = function() {
      var centerX, centerY, frame, position, radius;
      position = this.$el.position();
      radius = this.$el.width() / 2;
      centerX = position.left + radius;
      centerY = position.top + radius;
      return frame = new CircularFrame(centerX, centerY, radius);
    };

    Bomb.prototype.evaluate = function() {
      var growth, height, opacity, position, styles, width;
      growth = 20;
      if (!this.isExploding()) {
        return;
      }
      position = this.$el.position();
      height = this.$el.height() + growth;
      width = this.$el.width() + growth;
      opacity = parseFloat(this.$el.css('opacity'), 10);
      opacity = opacity - 0.2;
      opacity = Math.round(opacity * 100) / 100;
      if (opacity < 0.0) {
        opacity = 0;
      }
      styles = {
        top: position.top - (growth / 2),
        left: position.left - (growth / 2),
        height: height,
        width: width,
        opacity: opacity
      };
      return this.$el.css(styles);
    };

    Bomb.prototype.didClick = function(e) {
      return e.stopPropagation();
    };

    return Bomb;

  })(Entity);

  Soldier = (function(_super) {

    __extends(Soldier, _super);

    function Soldier() {
      return Soldier.__super__.constructor.apply(this, arguments);
    }

    Soldier.prototype.className = 'soldier';

    Soldier.prototype.width = 12;

    Soldier.prototype.height = 24;

    Soldier.prototype.events = {
      'click': 'didClick'
    };

    Soldier.prototype.initialize = function() {
      this.health = 100;
      return this.diedAt = null;
    };

    Soldier.prototype.isRemoveable = function() {
      var opacity;
      opacity = this.$el.css('opacity');
      return parseFloat(opacity, 10) === 0;
    };

    Soldier.prototype.takeDamage = function(damage) {
      this.health -= damage;
      if (this.health <= 0 && !this.isDead()) {
        return this.kill();
      }
    };

    Soldier.prototype.kill = function() {
      this.diedAt = new Date();
      return this.$el.css('background-color', 'black');
    };

    Soldier.prototype.isDead = function() {
      return this.diedAt != null;
    };

    Soldier.prototype.evaluate = function() {
      var opacity, timePassed;
      timePassed = new Date() - this.diedAt;
      if (!(this.isDead() && timePassed > 1000)) {
        return;
      }
      opacity = parseFloat(this.$el.css('opacity'), 10);
      opacity = opacity - 0.05;
      opacity = Math.round(opacity * 100) / 100;
      if (opacity < 0.0) {
        opacity = 0;
      }
      return this.$el.css({
        opacity: opacity
      });
    };

    Soldier.prototype.didClick = function(e) {
      return e.stopPropagation();
    };

    return Soldier;

  })(Entity);

  $(document).ready(function() {
    window.engine = new Core({
      viewport: '#game_canvas',
      fps: 30
    });
    window.engine.run();
    return window.engine.$el.on('click', function(e) {
      var bomb, canvasOffset, solider, x, y;
      canvasOffset = window.engine.$el.offset();
      x = e.pageX - canvasOffset.left;
      y = e.pageY - canvasOffset.top;
      if (e.shiftKey) {
        return solider = window.engine.addEntity(new Soldier(), {
          x: x,
          y: y
        });
      } else {
        return bomb = window.engine.addEntity(new Bomb(), {
          x: x,
          y: y
        });
      }
    });
  });

}).call(this);
